type User @model {
  id: ID!
  firstName: String!
  lastName: String!
  age: Int
  profileImageURL: String
  room: Room @connection
  device: Device @connection
  assignedGeofencing: [UserGeo] @connection(keyName: "byUser", fields: ["id"])
  facility: String
  phoneNumber: String
  email: String
  address: Address
  emergencyContacts: [Contact]  
  careGivers: [Contact] 
  additionalNotes: String
}

type Room @model 
@key(fields: ["roomNumber"]) {
  id: ID!
  roomNumber: String
  name: String
  location: LatLon
  locationRadius: String
  users: [User] @connection
}

type Device @model {
  id: ID!
  associatedUser: User @connection
  deviceStatus: String 
  data: [DeviceData] @connection
}

type DeviceData @model
@key(name: "byDeviceID", fields: ["deviceID", "createdAt"])
@key(name: "byDeviceAndObservationType", fields: ["deviceID", "observationType", "createdAt"]) {
  id: ID!
  deviceID: ID!
  device: Device @connection(fields: ["deviceID"])
  location: LatLon
  observationType: String
  observationUnit: String
  observationDescription: String
  observationValue: String
  createdAt: String!
}

type Geofence @model {
  id: ID!
  locationName: String
  centerpointCoordinates: LatLon
  radius: Int
  users: [UserGeo] @connection(keyName: "byGeofence", fields: ["id"]) 
}

type UserGeo @model
@key(name: "byUser", fields: ["userID", "geofenceID"])
@key(name: "byGeofence", fields: ["geofenceID", "userID"]) {
  id: ID!
  userID: ID!
  geofenceID: ID!
  user: User! @connection(fields: ["userID"])
  geofence: Geofence! @connection(fields: ["geofenceID"])
}

type LatLon {
  Latitude: String!
  Longitude: String!
}

type Contact {
  firstName: String!
  lastName: String!
  relationshipToUser: String
  phoneNumber: String
  email: String
  address: Address
}


type Address {
  streetAddress: String
  city: String
  stateProvince: String
  country: String
  postalZip: String
}

